/*
Saviynt Enterprise Identity Cloud (EIC) API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saviynt

import (
	"encoding/json"
)

// checks if the FetchControlListControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchControlListControl{}

// FetchControlListControl struct for FetchControlListControl
type FetchControlListControl struct {
	AnalyticsId *int32 `json:"analyticsId,omitempty"`
	Application *string `json:"application,omitempty"`
	AnalyticsName *string `json:"analyticsName,omitempty"`
	Controlid *string `json:"controlid,omitempty"`
	Category *string `json:"category,omitempty"`
	Description *string `json:"description,omitempty"`
	LastRun *string `json:"lastRun,omitempty"`
	Risk *string `json:"Risk,omitempty"`
	Recommendations *string `json:"recommendations,omitempty"`
	ConflictCount *int32 `json:"conflictCount,omitempty"`
}

// NewFetchControlListControl instantiates a new FetchControlListControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchControlListControl() *FetchControlListControl {
	this := FetchControlListControl{}
	return &this
}

// NewFetchControlListControlWithDefaults instantiates a new FetchControlListControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchControlListControlWithDefaults() *FetchControlListControl {
	this := FetchControlListControl{}
	return &this
}

// GetAnalyticsId returns the AnalyticsId field value if set, zero value otherwise.
func (o *FetchControlListControl) GetAnalyticsId() int32 {
	if o == nil || IsNil(o.AnalyticsId) {
		var ret int32
		return ret
	}
	return *o.AnalyticsId
}

// GetAnalyticsIdOk returns a tuple with the AnalyticsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetAnalyticsIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AnalyticsId) {
		return nil, false
	}
	return o.AnalyticsId, true
}

// HasAnalyticsId returns a boolean if a field has been set.
func (o *FetchControlListControl) HasAnalyticsId() bool {
	if o != nil && !IsNil(o.AnalyticsId) {
		return true
	}

	return false
}

// SetAnalyticsId gets a reference to the given int32 and assigns it to the AnalyticsId field.
func (o *FetchControlListControl) SetAnalyticsId(v int32) {
	o.AnalyticsId = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *FetchControlListControl) GetApplication() string {
	if o == nil || IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetApplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *FetchControlListControl) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *FetchControlListControl) SetApplication(v string) {
	o.Application = &v
}

// GetAnalyticsName returns the AnalyticsName field value if set, zero value otherwise.
func (o *FetchControlListControl) GetAnalyticsName() string {
	if o == nil || IsNil(o.AnalyticsName) {
		var ret string
		return ret
	}
	return *o.AnalyticsName
}

// GetAnalyticsNameOk returns a tuple with the AnalyticsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetAnalyticsNameOk() (*string, bool) {
	if o == nil || IsNil(o.AnalyticsName) {
		return nil, false
	}
	return o.AnalyticsName, true
}

// HasAnalyticsName returns a boolean if a field has been set.
func (o *FetchControlListControl) HasAnalyticsName() bool {
	if o != nil && !IsNil(o.AnalyticsName) {
		return true
	}

	return false
}

// SetAnalyticsName gets a reference to the given string and assigns it to the AnalyticsName field.
func (o *FetchControlListControl) SetAnalyticsName(v string) {
	o.AnalyticsName = &v
}

// GetControlid returns the Controlid field value if set, zero value otherwise.
func (o *FetchControlListControl) GetControlid() string {
	if o == nil || IsNil(o.Controlid) {
		var ret string
		return ret
	}
	return *o.Controlid
}

// GetControlidOk returns a tuple with the Controlid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetControlidOk() (*string, bool) {
	if o == nil || IsNil(o.Controlid) {
		return nil, false
	}
	return o.Controlid, true
}

// HasControlid returns a boolean if a field has been set.
func (o *FetchControlListControl) HasControlid() bool {
	if o != nil && !IsNil(o.Controlid) {
		return true
	}

	return false
}

// SetControlid gets a reference to the given string and assigns it to the Controlid field.
func (o *FetchControlListControl) SetControlid(v string) {
	o.Controlid = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *FetchControlListControl) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *FetchControlListControl) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *FetchControlListControl) SetCategory(v string) {
	o.Category = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FetchControlListControl) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FetchControlListControl) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FetchControlListControl) SetDescription(v string) {
	o.Description = &v
}

// GetLastRun returns the LastRun field value if set, zero value otherwise.
func (o *FetchControlListControl) GetLastRun() string {
	if o == nil || IsNil(o.LastRun) {
		var ret string
		return ret
	}
	return *o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetLastRunOk() (*string, bool) {
	if o == nil || IsNil(o.LastRun) {
		return nil, false
	}
	return o.LastRun, true
}

// HasLastRun returns a boolean if a field has been set.
func (o *FetchControlListControl) HasLastRun() bool {
	if o != nil && !IsNil(o.LastRun) {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given string and assigns it to the LastRun field.
func (o *FetchControlListControl) SetLastRun(v string) {
	o.LastRun = &v
}

// GetRisk returns the Risk field value if set, zero value otherwise.
func (o *FetchControlListControl) GetRisk() string {
	if o == nil || IsNil(o.Risk) {
		var ret string
		return ret
	}
	return *o.Risk
}

// GetRiskOk returns a tuple with the Risk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetRiskOk() (*string, bool) {
	if o == nil || IsNil(o.Risk) {
		return nil, false
	}
	return o.Risk, true
}

// HasRisk returns a boolean if a field has been set.
func (o *FetchControlListControl) HasRisk() bool {
	if o != nil && !IsNil(o.Risk) {
		return true
	}

	return false
}

// SetRisk gets a reference to the given string and assigns it to the Risk field.
func (o *FetchControlListControl) SetRisk(v string) {
	o.Risk = &v
}

// GetRecommendations returns the Recommendations field value if set, zero value otherwise.
func (o *FetchControlListControl) GetRecommendations() string {
	if o == nil || IsNil(o.Recommendations) {
		var ret string
		return ret
	}
	return *o.Recommendations
}

// GetRecommendationsOk returns a tuple with the Recommendations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetRecommendationsOk() (*string, bool) {
	if o == nil || IsNil(o.Recommendations) {
		return nil, false
	}
	return o.Recommendations, true
}

// HasRecommendations returns a boolean if a field has been set.
func (o *FetchControlListControl) HasRecommendations() bool {
	if o != nil && !IsNil(o.Recommendations) {
		return true
	}

	return false
}

// SetRecommendations gets a reference to the given string and assigns it to the Recommendations field.
func (o *FetchControlListControl) SetRecommendations(v string) {
	o.Recommendations = &v
}

// GetConflictCount returns the ConflictCount field value if set, zero value otherwise.
func (o *FetchControlListControl) GetConflictCount() int32 {
	if o == nil || IsNil(o.ConflictCount) {
		var ret int32
		return ret
	}
	return *o.ConflictCount
}

// GetConflictCountOk returns a tuple with the ConflictCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListControl) GetConflictCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ConflictCount) {
		return nil, false
	}
	return o.ConflictCount, true
}

// HasConflictCount returns a boolean if a field has been set.
func (o *FetchControlListControl) HasConflictCount() bool {
	if o != nil && !IsNil(o.ConflictCount) {
		return true
	}

	return false
}

// SetConflictCount gets a reference to the given int32 and assigns it to the ConflictCount field.
func (o *FetchControlListControl) SetConflictCount(v int32) {
	o.ConflictCount = &v
}

func (o FetchControlListControl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchControlListControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnalyticsId) {
		toSerialize["analyticsId"] = o.AnalyticsId
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.AnalyticsName) {
		toSerialize["analyticsName"] = o.AnalyticsName
	}
	if !IsNil(o.Controlid) {
		toSerialize["controlid"] = o.Controlid
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LastRun) {
		toSerialize["lastRun"] = o.LastRun
	}
	if !IsNil(o.Risk) {
		toSerialize["Risk"] = o.Risk
	}
	if !IsNil(o.Recommendations) {
		toSerialize["recommendations"] = o.Recommendations
	}
	if !IsNil(o.ConflictCount) {
		toSerialize["conflictCount"] = o.ConflictCount
	}
	return toSerialize, nil
}

type NullableFetchControlListControl struct {
	value *FetchControlListControl
	isSet bool
}

func (v NullableFetchControlListControl) Get() *FetchControlListControl {
	return v.value
}

func (v *NullableFetchControlListControl) Set(val *FetchControlListControl) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchControlListControl) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchControlListControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchControlListControl(val *FetchControlListControl) *NullableFetchControlListControl {
	return &NullableFetchControlListControl{value: val, isSet: true}
}

func (v NullableFetchControlListControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchControlListControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


