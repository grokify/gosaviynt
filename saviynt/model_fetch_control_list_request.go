/*
Saviynt Enterprise Identity Cloud (EIC) API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saviynt

import (
	"encoding/json"
)

// checks if the FetchControlListRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchControlListRequest{}

// FetchControlListRequest struct for FetchControlListRequest
type FetchControlListRequest struct {
	Application *string `json:"application,omitempty"`
	Category *string `json:"category,omitempty"`
	Max *string `json:"max,omitempty"`
	Offset *string `json:"offset,omitempty"`
}

// NewFetchControlListRequest instantiates a new FetchControlListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchControlListRequest() *FetchControlListRequest {
	this := FetchControlListRequest{}
	return &this
}

// NewFetchControlListRequestWithDefaults instantiates a new FetchControlListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchControlListRequestWithDefaults() *FetchControlListRequest {
	this := FetchControlListRequest{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *FetchControlListRequest) GetApplication() string {
	if o == nil || IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListRequest) GetApplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *FetchControlListRequest) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *FetchControlListRequest) SetApplication(v string) {
	o.Application = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *FetchControlListRequest) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListRequest) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *FetchControlListRequest) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *FetchControlListRequest) SetCategory(v string) {
	o.Category = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *FetchControlListRequest) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListRequest) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *FetchControlListRequest) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *FetchControlListRequest) SetMax(v string) {
	o.Max = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *FetchControlListRequest) GetOffset() string {
	if o == nil || IsNil(o.Offset) {
		var ret string
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchControlListRequest) GetOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *FetchControlListRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given string and assigns it to the Offset field.
func (o *FetchControlListRequest) SetOffset(v string) {
	o.Offset = &v
}

func (o FetchControlListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchControlListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableFetchControlListRequest struct {
	value *FetchControlListRequest
	isSet bool
}

func (v NullableFetchControlListRequest) Get() *FetchControlListRequest {
	return v.value
}

func (v *NullableFetchControlListRequest) Set(val *FetchControlListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchControlListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchControlListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchControlListRequest(val *FetchControlListRequest) *NullableFetchControlListRequest {
	return &NullableFetchControlListRequest{value: val, isSet: true}
}

func (v NullableFetchControlListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchControlListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


